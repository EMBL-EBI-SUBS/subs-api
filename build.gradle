buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.21.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
    id 'java-library'
    id 'org.springframework.boot' version '1.5.21.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.hidetake.ssh' version "1.1.3"
    id "com.sourcemuse.mongo" version "1.0.7"
    id "application"
}

group 'uk.ac.ebi.subs'
version '2.38.1-SNAPSHOT'
mainClassName = "uk.ac.ebi.subs.ApiApplication"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
}

dependencies {
    compile("uk.ac.ebi.subs:subs-processing-model:2.15.0-SNAPSHOT")
    compile("uk.ac.ebi.subs:subs-repository:2.35.0-SNAPSHOT")
    compile("uk.ac.ebi.subs:subs-messaging:0.6.0-SNAPSHOT")

    compile('uk.ac.ebi.tsc.aap.client:security:1.0.4-SNAPSHOT'){changing = true}
    compile('uk.ac.ebi.tsc.aap.client:service:1.0.4-SNAPSHOT'){changing = true}

    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile( 'org.springframework.data:spring-data-rest-hal-browser')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-amqp")

    compile("org.springframework.boot:spring-boot-devtools")
    compile('de.codecentric:spring-boot-admin-starter-client:1.5.7')

    compile("com.mashape.unirest:unirest-java:1.4.9")
    compile("com.fasterxml.jackson.module:jackson-module-afterburner")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.0")
    compile("org.apache.commons:commons-csv:1.5")
    compile("de.siegmar:logback-gelf:1.1.0")
    compile('com.auth0:java-jwt:3.3.0')

    compile("javax.xml.bind:jaxb-api:2.3.1")
    compile("javax.activation:activation:1.1.1")
    compile("com.sun.xml.bind:jaxb-core:2.3.0")
    compile("com.sun.xml.bind:jaxb-impl:2.3.0")

    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'

    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test"){
        exclude group: "com.vaadin.external.google", module:"android-json"
    }
    testCompile("com.google.code.gson:gson:2.7")
    //bug in spring boot, see https://github.com/spring-projects/spring-boot/issues/6502

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE'
    testCompile 'org.springframework.security:spring-security-test:4.2.3.RELEASE'

    testCompile("uk.ac.ebi.subs:subs-test-categories:0.1.0-SNAPSHOT")
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

ext {
    snippetsDir = file('build/generated-snippets')
}

springBoot {
    executable = true
    buildInfo()
}

test {
    outputs.dir snippetsDir
    runWithMongoDb = true
}

task(testsMakesDocs, type: Test) {
    jvmArgs "-Dspring.profiles.active=$gradle_env"
    outputs.dir snippetsDir
    useJUnit {
        includeCategories 'uk.ac.ebi.subs.DocumentationProducer'
    }
    testLogging {
        exceptionFormat = 'full'
    }
    runWithMongoDb = true
}

configure(testsMakesDocs) {
    group = "documentation"
    description = 'Run tests that generate documentation snippets'
}

ext.asciiDoctorIncludes = [study:'1',sample:'1',assay:'1',assayData:'1', project:'1']
ext.asciiDoctorAAPIncludes = [
    'aapServerRootURL': 'https://explore.aai.ebi.ac.uk',
    'aapServerAPIRootURL': 'https://explore.api.aai.ebi.ac.uk'
]
ext.asciiDoctorFileUploadIncludes = [
    'file_upload_server_url': 'https://submission-dev.ebi.ac.uk/files/'
]

if (gradle_env.startsWith("test")) {
    ext.asciiDoctorFileUploadIncludes = [
        'file_upload_server_url': 'https://submission-test.ebi.ac.uk/files/'
    ]
}

if (gradle_env.startsWith("prod")) {
    ext.asciiDoctorAAPIncludes = [
        'aapServerRootURL'   : 'https://aai.ebi.ac.uk',
        'aapServerAPIRootURL': 'https://api.aai.ebi.ac.uk'
    ]
    ext.asciiDoctorFileUploadIncludes = [
        'file_upload_server_url': 'https://submission.ebi.ac.uk/files/'
    ]
}

asciidoctor {
    inputs.dir snippetsDir
    attributes (
            'snippets': snippetsDir,
            'toc-title': 'Contents',
            'toclevels': 1,
            'doctype': 'book',
            'icons': 'font',
            'source-highlighter': 'highlightjs',
            'linkcss': '',
            'sectlinks': '',
            'sectanchors': ''
    )
    attributes asciiDoctorIncludes
    attributes asciiDoctorAAPIncludes
    attributes asciiDoctorFileUploadIncludes
    backends 'html5'

    dependsOn testsMakesDocs
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

processTestResources {
    filesMatching('application.yml') {
        expand(project.properties)
    }
}

processResources{
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

mongo {
    mongoVersion = "3.4.3"
}

remotes {
    dev {
        role('dev')
        host = project.hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
    }
    test {
        role('test')
        host = project.hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
    }
    prodHH1 {
        role('prod')
        role('prodHH')
        role('prodHH1')
        host = project.hasProperty(project.name + "ProdHH1DeployTarget") ? getProperty(project.name + "ProdHH1DeployTarget") : 'localhost'
    }
    prodHH2 {
        role('prod')
        role('prodHH')
        role('prodHH2')
        host = project.hasProperty(project.name + "ProdHH2DeployTarget") ? getProperty(project.name + "ProdHH2DeployTarget") : 'localhost'
    }
    prodHX1 {
        role('prod')
        role('prodHX')
        role('prodHX1')
        host = project.hasProperty(project.name + "ProdHX1DeployTarget") ? getProperty(project.name + "ProdHX1DeployTarget") : 'localhost'
    }
    prodHX2 {
        role('prod')
        role('prodHX')
        role('prodHX2')
        host = project.hasProperty(project.name + "ProdHX2DeployTarget") ? getProperty(project.name + "ProdHX2DeployTarget") : 'localhost'
    }
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}
task('externalCiTest', type: Test) {
    useJUnit {
        excludeCategories 'uk.ac.ebi.subs.RabbitMQDependentTest', 'uk.ac.ebi.subs.BioSamplesDependentTest'
    }
    testLogging {
        exceptionFormat = 'full'
        events "skipped", "failed"
    }
    runWithMongoDb = true
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
    doLast {
        def uploadJarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
        File jarDeployDir = new File("/data/$gradle_env/$project.name/jar",uploadJarFileName)
        sshRun(jarDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

task testSsh(type: SshTask) {
    doLast {
        sshTestRun()
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(File jarDeployFile) {
    def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
    File jarDeployDir = jarDeployFile.getParentFile()
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            println "Uploading jar $jar.archivePath.name to $jarDeployDir/$uploadJarFileName  area on $remote"
            put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}

private Object sshTestRun(){
    ssh.run {
        session(remotes.role(gradle_env)){
            println "started ssh session"
        }
    }
}

task printClasspath {
    configurations.testCompile.each { println it }
}

//configurations.all {
//    resolutionStrategy.cacheChangingModulesFor(0, "seconds")
//}
