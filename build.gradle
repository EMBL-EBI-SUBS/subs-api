plugins {
    id "org.asciidoctor.convert" version "1.5.2"
}

apply plugin: 'java'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'application'
mainClassName = "uk.ac.ebi.subs.ApiApplication"

dependencies {
    compile project(':subs-repository')
    compile project(':subs-processing-model')

    compile("uk.ac.ebi.subs:subs-data-model:1.0.3-SNAPSHOT")
    compile("uk.ac.ebi.subs:subs-messaging:1.0.3-SNAPSHOT")
    compile("uk.ac.ebi.subs:validator-common:1.1.0-SNAPSHOT")

    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile("com.fasterxml.jackson.module:jackson-module-afterburner:2.7.1")


    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.google.code.gson:gson:2.7") //bug in spring boot, see https://github.com/spring-projects/spring-boot/issues/6502

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE'

    testCompile("com.mashape.unirest:unirest-java:1.4.9")

    testCompile project(':subs-test-categories')
    compile 'de.codecentric:spring-boot-admin-starter-client:1.4.6'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

task (testsMakesDocs, type: Test) {
    outputs.dir snippetsDir
    useJUnit {
        includeCategories 'uk.ac.ebi.subs.DocumentationProducer'
    }
    testLogging {
        exceptionFormat = 'full'
    }
}

configure(testsMakesDocs) {
    group = "documentation"
    description = 'Run tests that generate documentation snippets'
}

asciidoctor {
    attributes 'snippets': snippetsDir
    sourceDir file('src/main/resources/docs')
    backends 'html5'
    inputs.dir snippetsDir
    dependsOn testsMakesDocs
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

publish {
    dependsOn assemble
}

springBoot {
    executable = true
}

remotes {
    staging {
        role('staging')
        host = 'mac-subs-001'
    }
    dev {
        role('dev')
        host = 'wp-np2-d0'
    }
    test {
        role('test')
        host = 'wp-np2-d1'
    }
}

task deployToDev(type: SshTask, dependsOn: 'build') {
    doLast {
        def deployHome = "/homes/sub_adm/tc_subs/submission-dev";
        File jarDeployDir = new File(deployHome,"jar")

        ssh.run {
            session(remotes.dev) {
                println "Uploading jar $jar.archivePath.name to $jarDeployDir area on $remote"
                put(jar.archivePath.absolutePath, jarDeployDir.absolutePath)
                println "creating symbolic link to $jar.archiveName"
                def result = execute "ln -s -f $jarDeployDir/$jar.archiveName $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
                println result

            }
        }

    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }

}

task deployToTest(type: SshTask, dependsOn: 'build') {
    doLast {
        def deployHome = "/homes/sub_adm/tc_subs/submission-test";
        File jarDeployDir = new File(deployHome,"jar")

        ssh.run {
            session(remotes.test) {
                println "Uploading jar $jar.archivePath.name to $jarDeployDir area on $remote"
                put(jar.archivePath.absolutePath, jarDeployDir.absolutePath)
                println "creating symbolic link to $jar.archiveName"
                def result = execute "ln -s -f $jarDeployDir/$jar.archiveName $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
                println result

            }
        }

    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }



}


